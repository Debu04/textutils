{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","about","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0220d32c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n        <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode =='light'? 'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </nav>\r\n        </>\r\n      )\r\n}\r\n      Navbar.propTypes = {\r\n        title:PropTypes.string.isRequired, // (.isRequired) means you need to set the title must.\r\n      about:PropTypes.string\r\n}\r\n\r\n      // In case if you forgot to set the name , the default name will be use\r\n      Navbar.defaultProps = {\r\n        title : 'Set title here',\r\n      about : 'About text here'\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n    // copy function\r\n    const handelCopy = () => {\r\n        var text = document.getElementById('myBox')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard\", \"success\");\r\n    }\r\n    // Extra spaces remover function\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"All extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handleOnchange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode =='dark'? 'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" onChange={handleOnchange} style={{backgroundColor:props.mode =='dark'? 'grey':'white',color: props.mode =='dark'? 'white':'#042743'}}value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handelCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Extra Space Remover</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode =='dark'? 'white':'#042743'}}>\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length}Minutes to Read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Nothing to preview !!!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        // Here (props.alert &&) will run first then rest of the code will run\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light'); // Wether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000);\n  }\n  const toggleMode = () => {\n    if(mode=='light'){\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode ={mode} toggleMode={toggleMode}/>\n      <Alert alert= {alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}